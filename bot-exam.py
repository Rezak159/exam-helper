import telebot
from telebot.types import Message, BotCommand
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from telebot import types
from config import TOKEN_TG, TOKEN_AI
from groq import Groq
import os
import json
import logging
import random
import re
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.ERROR)
for logger_name in ("httpx", "telebot"):
    logging.getLogger(logger_name).setLevel(logging.ERROR)

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = telebot.TeleBot(TOKEN_TG)
client = Groq(api_key=TOKEN_AI)
DEFAULT_MODEL = 'openai/gpt-oss-120b'

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
USER_STATS_FILE = "user_stats.json"
USER_MESSAGES_FILE = "user_messages.json"
EXAM_STATE_FILE = "exam_states.json"
USER_QUESTION_STATS_FILE = "user_question_stats.json"
MAX_CONTEXT_LENGTH = 3000

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ–º —ç–∫–∑–∞–º–µ–Ω–∞
EXAM_TOPICS = {
    "python": {
        "questions_file": "answers_python.json",
        "display_name": "–ü–∏—Ç–æ–Ω—á–∏–∫ üêç"
    },
    "–¢–µ–∫—Å—Ç": {
        "questions_file": "answers_graph.json", 
        "display_name": "—Ç–µ–∫—Å—Ç üî¢"
    },
    "clash royale": {
        "questions_file": "answers_royale.json", 
        "display_name": "–ö–ª–µ—â —Ä–æ—è–ª—å üêû"
    }
}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_messages = {}
user_stats = {}
answers_data = {}
user_exam_state = {}
user_question_stats = {}

# ======================== –£–¢–ò–õ–ò–¢–´ ========================

def load_data(filename):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    if os.path.exists(filename):
        with open(filename, "r", encoding='utf-8') as file:
            return json.load(file)
    return {}

def save_data(filename, data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
    with open(filename, "w", encoding='utf-8') as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

def save_exam_state():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —ç–∫–∑–∞–º–µ–Ω–∞"""
    save_data(EXAM_STATE_FILE, user_exam_state)

def load_topic_data(topic_key):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–º—ã (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å)"""
    if topic_key in EXAM_TOPICS:
        questions_file = EXAM_TOPICS[topic_key]["questions_file"]
        return load_data(questions_file)
    return {}

def get_user_questions(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    user_id_str = str(user_id)
    if user_id_str in user_exam_state:
        return user_exam_state[user_id_str].get("questions", {})
    return {}


def split_message(text, max_length=4096):
    """–†–∞–∑–±–∏–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏"""
    return [text[i:i + max_length] for i in range(0, len(text), max_length)]

def trim_context(context):
    """–û–±—Ä–µ–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–æ –ª–∏–º–∏—Ç–∞"""
    current_length = sum(len(msg["content"]) for msg in context)
    while current_length > MAX_CONTEXT_LENGTH and context:
        context.pop(0)
        current_length = sum(len(msg["content"]) for msg in context)
    return context

def remove_think_blocks(text):
    """–£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –º–æ–¥–µ–ª–∏"""
    return re.sub(r'<think>[\s\S]*?</think>', '', text, flags=re.IGNORECASE)

def send_message_safe(chat_id, text, markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        bot.send_message(chat_id, text, parse_mode='Markdown', reply_markup=markup)
    except Exception:
        bot.send_message(chat_id, text, reply_markup=markup)

def parse_ai_score(ai_response):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ü–µ–Ω–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò
    –ò—â–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω: "–û—Ü–µ–Ω–∫–∞: XX%"
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ 0-100 –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    # –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω: "–û—Ü–µ–Ω–∫–∞: XX%"
    match = re.search(r"–û—Ü–µ–Ω–∫–∞:\s*(\d{1,3})%", ai_response, re.IGNORECASE)
    if match:
        score = int(match.group(1))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å (0-100%)
        if 0 <= score <= 100:
            return score
    
    # –ó–∞–ø–∞—Å–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω: –ø—Ä–æ—Å—Ç–æ "XX%" –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
    match = re.search(r"^(\d{1,3})%", ai_response.strip())
    if match:
        score = int(match.group(1))
        if 0 <= score <= 100:
            return score
            
    return None

# ======================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ========================

def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(KeyboardButton("üìö –ù–∞—á–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω"))
    keyboard.row(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"))
    return keyboard

def get_exam_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(KeyboardButton("üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–æ—Ä–∏—é"))
    keyboard.row(KeyboardButton("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"), KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω"))
    return keyboard

def get_hidden_keyboard():
    """–°–∫—Ä—ã—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    return types.ReplyKeyboardRemove()

# ======================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ========================

def initialize_user(user_id, user_data):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id_str = str(user_id)
    if user_id_str not in user_stats:
        user_stats[user_id_str] = {
            "username": user_data.get('username', 'Unknown'),
            "text_requests": 0,
            "voice_requests": 0,
            "model": DEFAULT_MODEL,
            "exam_answered": 0
        }
        save_data(USER_STATS_FILE, user_stats)
    
    if user_id_str not in user_messages:
        user_messages[user_id_str] = []

def load_all_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    global user_messages, user_stats, answers_data, user_exam_state, user_question_stats
    user_messages = load_data(USER_MESSAGES_FILE)
    user_stats = load_data(USER_STATS_FILE)
    user_exam_state = load_data(EXAM_STATE_FILE)
    user_question_stats = load_data(USER_QUESTION_STATS_FILE)

# ======================== –≠–ö–ó–ê–ú–ï–ù ========================

import hashlib

def get_question_hash(question_text):
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞"""
    return hashlib.md5(question_text.encode('utf-8')).hexdigest()[:12]

def add_score_to_question(user_id, topic_key, question_text, score, max_history=5):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –∫ –≤–æ–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id_str = str(user_id)
    question_hash = get_question_hash(question_text)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if user_id_str not in user_question_stats:
        user_question_stats[user_id_str] = {}
    if topic_key not in user_question_stats[user_id_str]:
        user_question_stats[user_id_str][topic_key] = {}
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫
    scores_list = user_question_stats[user_id_str][topic_key].get(question_hash, [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
    scores_list.append(score)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if len(scores_list) > max_history:
        scores_list.pop(0)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    user_question_stats[user_id_str][topic_key][question_hash] = scores_list
    save_data(USER_QUESTION_STATS_FILE, user_question_stats)

def get_average_score(user_id, topic_key, question_text):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–æ–ø—Ä–æ—Å—É"""
    user_id_str = str(user_id)
    question_hash = get_question_hash(question_text)
    
    if (user_id_str in user_question_stats and 
        topic_key in user_question_stats[user_id_str] and
        question_hash in user_question_stats[user_id_str][topic_key]):
        
        scores = user_question_stats[user_id_str][topic_key][question_hash]
        return sum(scores) / len(scores) if scores else 0
    
    return 0  # –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å

def select_adaptive_question(user_id, topic_key, available_questions):
    """–í—ã–±–∏—Ä–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id_str = str(user_id)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å–∞ –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    weights = []
    questions = list(available_questions.keys())
    
    for question in questions:
        avg_score = get_average_score(user_id, topic_key, question)
        
        # –§–æ—Ä–º—É–ª–∞: —á–µ–º –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª, —Ç–µ–º –≤—ã—à–µ –≤–µ—Å
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 2.0 —É—Å–∏–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É
        weight = (100 - avg_score) ** 2.0
        weight = max(weight, 1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å = 1
        
        weights.append(weight)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
    import random
    selected_question = random.choices(questions, weights=weights, k=1)[0]
    
    return selected_question

def get_topics_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã —ç–∫–∑–∞–º–µ–Ω–∞"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—ã –ø–æ 2 –≤ —Ä—è–¥
    topics = list(EXAM_TOPICS.keys())
    for i in range(0, len(topics), 2):
        if i + 1 < len(topics):
            keyboard.row(
                KeyboardButton(EXAM_TOPICS[topics[i]]["display_name"]),
                KeyboardButton(EXAM_TOPICS[topics[i+1]]["display_name"])
            )
        else:
            keyboard.row(KeyboardButton(EXAM_TOPICS[topics[i]]["display_name"]))
    
    keyboard.row(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    return keyboard

def start_exam(user_id, chat_id, topic_key):
    """–ù–∞—á–∞–ª–æ —ç–∫–∑–∞–º–µ–Ω–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ"""
    user_id_str = str(user_id)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–º—ã
    questions_data = load_topic_data(topic_key)
    if not questions_data:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: –ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ–º—ã '{EXAM_TOPICS[topic_key]['display_name']}' –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_keyboard())
        return
    
    question = random.choice(list(questions_data.keys()))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_exam_state[user_id_str] = {
        "question": question,
        "waiting_answer": True,
        "topic": topic_key,
        "topic_display": EXAM_TOPICS[topic_key]["display_name"],
        "start_time": time.time(),
        "questions": questions_data  # üëà –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–¥–µ—Å—å!
    }
    save_exam_state()  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    
    bot.send_message(
        chat_id,
        f"üéØ –≠–∫–∑–∞–º–µ–Ω –Ω–∞—á–∞—Ç!\n\n"
        f"–¢–µ–º–∞: {EXAM_TOPICS[topic_key]['display_name']}\n"
        f"–í–æ–ø—Ä–æ—Å:\n{question}\n\n"
        f"üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
        reply_markup=get_hidden_keyboard()
    )


def process_exam_answer(user_id, chat_id, user_answer):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω"""
    user_id_str = str(user_id)
    question = user_exam_state[user_id_str]["question"]
    topic_key = user_exam_state[user_id_str]["topic"]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    user_questions = get_user_questions(user_id)
    correct_answer = user_questions.get(question, "")
    
    # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_exam_state[user_id_str]["waiting_answer"] = False
    user_exam_state[user_id_str]["waiting_action"] = True
    save_exam_state()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    user_stats[user_id_str]["exam_answered"] = user_stats[user_id_str].get("exam_answered", 0) + 1
    save_data(USER_STATS_FILE, user_stats)

    
    # –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞
    prompt = (
        f"–í–æ–ø—Ä–æ—Å: {question}\n"
        f"–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–æ–±—Ä–∞–∑–µ—Ü): {correct_answer}\n"
        f"–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_answer}\n\n"
        f"–û—Ü–µ–Ω–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º (–æ—Ç 0% –¥–æ 100%). –ù–µ –±—É–¥—å —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–º."
        f"–ö—Ä–∞—Ç–∫–æ —É–∫–∞–∂–∏, –≤–∑—è–≤ –∏–∑ —ç—Ç–∞–ª–æ–Ω–∞, —á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ —á—Ç–æ —Ö–æ—Ä–æ—à–æ.\n"
        f"–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n–û—Ü–µ–Ω–∫–∞: <–ø—Ä–æ—Ü–µ–Ω—Ç—ã>%\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: <—Ç–µ–∫—Å—Ç>"
    )
    
    try:
        chat_completion = client.chat.completions.create(
            messages=[{"role": "user", "content": prompt}],
            model=user_stats[user_id_str].get("model", DEFAULT_MODEL),
        )
        response = chat_completion.choices[0].message.content
        response = remove_think_blocks(response)

        # üëà –ù–û–í–û–ï: –ü–∞—Ä—Å–∏–º –æ—Ü–µ–Ω–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        score = parse_ai_score(response)
        if score is not None:
            add_score_to_question(user_id, topic_key, question, score)
            logger.info(f"Saved score {score} for user {user_id}, question: {question[:50]}...")
        else:
            logger.warning(f"Failed to parse score from AI response: {response[:100]}...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —ç–∫–∑–∞–º–µ–Ω–∞
        send_message_safe(chat_id, f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{response}", get_exam_keyboard())
        
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}", reply_markup=get_exam_keyboard())

def show_theory(user_id, chat_id):
    """–ü–æ–∫–∞–∑ —Ç–µ–æ—Ä–∏–∏ –ø–æ –≤–æ–ø—Ä–æ—Å—É"""
    user_id_str = str(user_id)
    question = user_exam_state[user_id_str].get("question", "")
    
    # –ë–µ—Ä–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_questions = get_user_questions(user_id)
    correct_answer = user_questions.get(question, "")
    
    theory_prompt = (
        f"–¢—ã ‚Äî –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏. –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ "
        f"—Å–æ—Å—Ç–∞–≤—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π, –Ω–æ –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Å–ø–µ–∫—Ç –ø–æ —Ç–µ–º–µ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω—É. "
        f"–ò–∑–ª–∞–≥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, —Å–ø–∏—Å–∫–∞–º–∏ –∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞, –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ.\n\n"
        f"–í–æ–ø—Ä–æ—Å: {question}\n"
        f"–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n\n"
        f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:\n"
        f"1) –ö—Ä–∞—Ç–∫–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –≤ —Ç–µ–º—É (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\n"
        f"2) –ö–ª—é—á–µ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è\n"
        f"3) –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏—ë–º—ã/—Å–∏–Ω—Ç–∞–∫—Å–∏—Å/—Ñ–æ—Ä–º—É–ª—ã (–ø–æ —Ç–µ–º–µ)\n"
        f"4) –ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã (–º–∏–Ω–∏–º—É–º 2)\n"
        f"5) –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –∏ –∫–∞–∫ –∏—Ö –∏–∑–±–µ–≥–∞—Ç—å\n"
        f"6) –ú–∏–Ω–∏-—á–µ–∫–ª–∏—Å—Ç –ø–µ—Ä–µ–¥ —ç–∫–∑–∞–º–µ–Ω–æ–º\n\n"
        f"–í—ã–≤–æ–¥–∏ —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ó–∞–≥–æ–ª–æ–≤–æ–∫: '–¢–µ–æ—Ä–∏—è –ø–æ —Ç–µ–º–µ'."
    )
    
    try:
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∏–¥—ë—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–æ—Ä–∏–∏
        thinking_message = bot.send_message(chat_id, 'ü§î –î—É–º–∞—é –Ω–∞–¥ —Ç–µ–æ—Ä–∏–µ–π...')

        theory_completion = client.chat.completions.create(
            messages=[{"role": "user", "content": theory_prompt}],
            model=user_stats[user_id_str].get("model", DEFAULT_MODEL),
        )
        theory = theory_completion.choices[0].message.content
        theory = remove_think_blocks(theory)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–æ—Ä–∏—é —á–∞—Å—Ç—è–º–∏, –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é"
        message_parts = split_message(theory)
        if message_parts:
            try:
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=thinking_message.message_id,
                    text=message_parts[0],
                    parse_mode='Markdown'
                )
            except:
                bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=thinking_message.message_id,
                    text=message_parts[0]
                )
            for part in message_parts[1:]:
                send_message_safe(chat_id, part)
            
    except Exception as e:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é" –Ω–∞ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        try:
            bot.edit_message_text(
                chat_id=chat_id,
                message_id=thinking_message.message_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–æ—Ä–∏–∏: {e}"
            )
        except:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–æ—Ä–∏–∏: {e}")

def next_question(user_id, chat_id):
    """–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"""
    user_id_str = str(user_id)
    topic_key = user_exam_state[user_id_str]["topic"]
    
    # –ë–µ—Ä–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_questions = get_user_questions(user_id)
    if not user_questions:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return
    
    question = select_adaptive_question(user_id, topic_key, user_questions)
    topic_display = user_exam_state[user_id_str]["topic_display"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_exam_state[user_id_str].update({
        "question": question,
        "waiting_answer": True,
        "waiting_action": False
    })
    save_exam_state()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    bot.send_message(
        chat_id,
        f"üìã –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ({topic_display}):\n\n{question}\n\nüí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
        reply_markup=get_hidden_keyboard()
    )


def end_exam(user_id, chat_id):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–∞"""
    user_id_str = str(user_id)
    
    # –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å—á–µ–∑–∞—é—Ç
    user_exam_state.pop(user_id_str, None)
    save_exam_state()
    
    bot.send_message(
        chat_id,
        "‚úÖ –≠–∫–∑–∞–º–µ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —ç–∫–∑–∞–º–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
        reply_markup=get_main_keyboard()
    )


# ======================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ========================

@bot.message_handler(commands=['start'])
def cmd_start(message: Message):
    user_id = message.from_user.id
    initialize_user(user_id, message.from_user.__dict__)
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        f"–Ø –ò–ò-–±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ.\n\n"
        f"–ß—Ç–æ —è —É–º–µ—é:\n"
        f"‚Ä¢ üéØ –ü—Ä–æ–≤–æ–¥–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω—ã —Å –æ—Ü–µ–Ω–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤\n"
        f"‚Ä¢ üìñ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–æ—Ä–∏—é –ø–æ —Ç–µ–º–∞–º\n"
        f"‚Ä¢ üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        f"‚Ä¢ üí¨ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ!"
    )
    
    send_message_safe(message.chat.id, welcome_text, get_main_keyboard())

@bot.message_handler(commands=['help'])
def cmd_help(message: Message):
    help_text = (
        "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "üéØ `/exam` ‚Äî –Ω–∞—á–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω\n"
        "üìä `/settings` ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "üóë `/clear` ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
        "‚ùå `/cancel_exam` ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —ç–∫–∑–∞–º–µ–Ω\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ!"
    )
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['clear'])
def cmd_clear(message: Message):
    user_id = message.from_user.id
    initialize_user(user_id, message.from_user.__dict__)
    user_messages[str(user_id)] = []
    save_data(USER_MESSAGES_FILE, user_messages)
    bot.send_message(message.chat.id, 'üóë –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!', reply_markup=get_main_keyboard())

@bot.message_handler(commands=['settings'])
def cmd_settings(message: Message):
    user_id = message.from_user.id
    initialize_user(user_id, message.from_user.__dict__)
    stats = user_stats[str(user_id)]
    
    stats_text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {stats['username']}\n"
        f"üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {stats['text_requests']}\n"
        f"üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {stats['voice_requests']}\n"
        f"üß† –ú–æ–¥–µ–ª—å –ò–ò: {stats.get('model', DEFAULT_MODEL)}\n"
        f"üìù –≠–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats.get('exam_answered', 0)}"
    )
    
    send_message_safe(message.chat.id, stats_text, get_main_keyboard())

@bot.message_handler(commands=['exam'])
def cmd_exam(message: Message):
    user_id = message.from_user.id
    initialize_user(user_id, message.from_user.__dict__)
    
    user_id_str = str(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω
    if user_id_str in user_exam_state and user_exam_state[user_id_str].get("waiting_answer"):
        current_question = user_exam_state[user_id_str]["question"]
        current_topic = user_exam_state[user_id_str].get("topic_display", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        bot.send_message(
            message.chat.id,
            f"‚ùó –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —ç–∫–∑–∞–º–µ–Ω!\n\n"
            f"–¢–µ–º–∞: {current_topic}\n"
            f"–í–æ–ø—Ä–æ—Å: {current_question}\n\n"
            f"üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel_exam –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
            reply_markup=get_hidden_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–µ–º—ã
    user_exam_state[user_id_str] = {"waiting_topic": True}
    save_exam_state()
    
    topics_text = "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞:\n\n"
    for topic_key, topic_data in EXAM_TOPICS.items():
        questions_count = len(load_topic_data(topic_key))
        topics_text += f"‚Ä¢ {topic_data['display_name']} ({questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤)\n"
    
    send_message_safe(message.chat.id, topics_text, get_topics_keyboard())


@bot.message_handler(commands=['cancel_exam'])
def cmd_cancel_exam(message: Message):
    user_id = message.from_user.id
    user_id_str = str(user_id)
    
    if user_id_str in user_exam_state:
        user_exam_state.pop(user_id_str)
        save_exam_state()
        bot.send_message(message.chat.id, "‚ùå –≠–∫–∑–∞–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω!", reply_markup=get_main_keyboard())
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞.", reply_markup=get_main_keyboard())

# ======================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–ê ========================

@bot.message_handler(content_types=['text'])
def handle_text(message: Message):
    user_id = message.from_user.id
    user_id_str = str(user_id)
    text = message.text.strip()
    
    initialize_user(user_id, message.from_user.__dict__)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    if user_id_str in user_exam_state and user_exam_state[user_id_str].get("waiting_topic"):
        # –ò—â–µ–º —Ç–µ–º—É –ø–æ display_name
        selected_topic = None
        for topic_key, topic_data in EXAM_TOPICS.items():
            if text == topic_data["display_name"]:
                selected_topic = topic_key
                break
        
        if selected_topic:
            user_exam_state[user_id_str].pop("waiting_topic", None)
            start_exam(user_id, message.chat.id, selected_topic)  # üëà –¢–µ–ø–µ—Ä—å —Å topic_key!
            return
        elif text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            user_exam_state.pop(user_id_str, None)
            save_exam_state()
            send_message_safe(message.chat.id, "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", get_main_keyboard())
            return
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if text == "üìö –ù–∞—á–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω":
        cmd_exam(message)
        return
    
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        cmd_settings(message)
        return
    
    elif text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
        cmd_clear(message)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫–∑–∞–º–µ–Ω–∞
    if user_id_str in user_exam_state:
        exam_state = user_exam_state[user_id_str]
        
        # –ï—Å–ª–∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        if exam_state.get("waiting_answer"):
            process_exam_answer(user_id, message.chat.id, text)
            return
        
        # –ï—Å–ª–∏ –∂–¥–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
        elif exam_state.get("waiting_action"):
            if text == "üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–æ—Ä–∏—é":
                show_theory(user_id, message.chat.id)
                return
            
            elif text == "‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å":
                next_question(user_id, message.chat.id)
                return
            
            elif text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω":
                end_exam(user_id, message.chat.id)
                return
    
    # –û–±—ã—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –ò–ò
    user_stats[user_id_str]["text_requests"] += 1
    save_data(USER_STATS_FILE, user_stats)
    
    sent_message = bot.send_message(message.chat.id, 'ü§î –î—É–º–∞—é...')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_message = {"role": "user", "content": text}
    user_messages[user_id_str].append(new_message)
    
    # –û–±—Ä–µ–∑–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context = trim_context(user_messages[user_id_str])
    
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ –ò–ò
        chat_completion = client.chat.completions.create(
            messages=context,
            model=user_stats[user_id_str].get("model", DEFAULT_MODEL),
        )
        
        response = chat_completion.choices[0].message.content
        response = remove_think_blocks(response)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        bot_response = {"role": "assistant", "content": response}
        user_messages[user_id_str].append(bot_response)
        user_messages[user_id_str] = trim_context(user_messages[user_id_str])
        save_data(USER_MESSAGES_FILE, user_messages)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        message_parts = split_message(response)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=sent_message.message_id,
                text=message_parts[0],
                parse_mode='Markdown'
            )
        except:
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=sent_message.message_id,
                text=message_parts[0]
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
        for part in message_parts[1:]:
            send_message_safe(message.chat.id, part)
            
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clear –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")

# ======================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–ê ========================

@bot.message_handler(content_types=['voice'])
def handle_voice(message: Message):
    user_id = message.from_user.id
    user_id_str = str(user_id)
    
    initialize_user(user_id, message.from_user.__dict__)
    user_stats[user_id_str]["voice_requests"] += 1
    save_data(USER_STATS_FILE, user_stats)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
        file_info = bot.get_file(message.voice.file_id)
        file_path = file_info.file_path
        audio_file = bot.download_file(file_path)
        audio_filename = f"{message.chat.id}_audio.ogg"
        
        with open(audio_filename, 'wb') as f:
            f.write(audio_file)
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        with open(audio_filename, 'rb') as audio:
            transcription = client.audio.transcriptions.create(
                file=(audio_filename, audio.read()),
                model="whisper-large-v3-turbo",
                response_format="json",
                language="ru",
                temperature=0.0
            )
        
        os.remove(audio_filename)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        transcribed_text = transcription.text.strip()
        
        # –ï—Å–ª–∏ –≤ —ç–∫–∑–∞–º–µ–Ω–µ –∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç
        if user_id_str in user_exam_state and user_exam_state[user_id_str].get("waiting_answer"):
            process_exam_answer(user_id, message.chat.id, transcribed_text)
            return
        
        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        bot.send_message(message.chat.id, f"üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: {transcribed_text}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        new_message = {"role": "user", "content": f"[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]: {transcribed_text}"}
        user_messages[user_id_str].append(new_message)
        save_data(USER_MESSAGES_FILE, user_messages)
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# ======================== –ó–ê–ü–£–°–ö ========================

def set_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand(command="exam", description="–ù–∞—á–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω"),
        BotCommand(command="settings", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand(command="clear", description="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
        BotCommand(command="cancel_exam", description="–û—Ç–º–µ–Ω–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω"),
    ]
    bot.set_my_commands(commands)

if __name__ == '__main__':
    print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    load_all_data()
    print("üìã –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥...")
    set_commands()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    bot.polling(none_stop=True)
